/*
 * ITGR23Modifier.java
 *
 * here, use this instead of bugging me on AIM for a modded exec
 *
 * Created on December 23, 2008, 10:10 PM
 * @author infamouspat
 * @shoutouts {AJ 187, vyhd, Renard, KholdFuzion, strtoupper("team dragonforce")}
 * @shoutouts^2 {kyle and para - 12/24/08}
 * @also netbeans fucking rocks <3
 */

package itgr23hax;

import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class ITGR23Modifier extends javax.swing.JFrame {
    private class RetardedInputException extends Exception {
        RetardedInputException(String message) {
            super(message);
        }
    }
    
    /**
     * TODO: this needs to be expanded to unsigned integers too
     * counter-TODO: i'll add it when there's an actual use for it
     */
    class ModLocation {
        public ModLocation() {
            this.fileLocation = 0;
            this.changes = null;
            this.size = 0;
        }
        public ModLocation(long loc, byte[] _changes, int _size) {
            this.fileLocation = loc;
            this.size = _size;
            this.changes = new Byte[_size];
            for( int i = 0; i < _size; i++) {
                this.changes[i] = new Byte(new Integer(_changes[i] & 0xff).byteValue());
            }
        }
        public ModLocation(long loc, float _change) {
            this.fileLocation = loc;
            this.size = 1;
            this.changes = new Float[1];
            this.changes[0] = _change;
        }
        public void makeChange( RandomAccessFile ras ) throws IOException {
            ras.seek(this.fileLocation);
            for(int i = 0; i < this.size; i++) {
                if (this.changes[i].getClass().getName() == "java.lang.Float") {
                    byte[] lebytes = new byte[4]; // lol le bytes
                    ras.writeFloat(((Float)this.changes[i]).floatValue());
                    
                    // HACK: Java's a little prissy BITCH when it comes to
                    // writing stuff in little endian, so we gotta do it ourselves
                    ras.seek(this.fileLocation+(4*i));
                    ras.read(lebytes, 0, 4);
                    ras.seek(this.fileLocation+(4*i));
                    for (int j = 3; j >= 0; j--) {
                        ras.writeByte(lebytes[j] & 0xff);
                    }
                } else {
                    ras.writeByte(((Byte)this.changes[i]).byteValue() & 0xff);
                }
            }
        }
        public long fileLocation;
        public Object[] changes;
        public int size;
    }
    
    private void addChanges(ArrayList<ModLocation> points, RandomAccessFile ras) throws IOException {
        for( int i = 0; i < points.size(); i++ ) {
            points.get(i).makeChange(ras);
        }
    }
    
    /** Creates new form ITGR23Modifier */
    public ITGR23Modifier() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        origR23Location = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        origR23LocationFileChooser = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        outputFile = new javax.swing.JTextField();
        outputFileChooser = new javax.swing.JButton();
        useDongleTrue = new javax.swing.JRadioButton();
        useDongleFalse = new javax.swing.JRadioButton();
        removeSongLengthCheck = new javax.swing.JCheckBox();
        removeSongSizeCheck = new javax.swing.JCheckBox();
        enforcedSongLength = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        giveUpTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        clickGenerate = new javax.swing.JButton();
        disableBIOSPass = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ITG R23 Editor - 2009 infamouspat");
        jLabel1.setText("ITG r23 Editor (c) 2009 infamouspat - basically..Game Genie for ITG");

        jLabel2.setText("Original r23 executable:");

        origR23LocationFileChooser.setText("Choose...");
        origR23LocationFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                origR23ChooseFile(evt);
            }
        });

        jLabel3.setText("Output file for new executable:");

        outputFileChooser.setText("Choose...");
        outputFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputChooseFile(evt);
            }
        });

        buttonGroup1.add(useDongleTrue);
        useDongleTrue.setSelected(true);
        useDongleTrue.setText("Dongle");
        useDongleTrue.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useDongleTrue.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(useDongleFalse);
        useDongleFalse.setText("No Dongle");
        useDongleFalse.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useDongleFalse.setMargin(new java.awt.Insets(0, 0, 0, 0));

        removeSongLengthCheck.setText("Remove Music Wheel Song Length Check");
        removeSongLengthCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        removeSongLengthCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        removeSongSizeCheck.setText("Remove Music Wheel Song File Size Check");
        removeSongSizeCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        removeSongSizeCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        enforcedSongLength.setText("135");

        jLabel4.setText("r23 \"Enforced\" Song Length Limit (in seconds)");

        giveUpTime.setText("2.5");

        jLabel5.setText("\"Give Up\" time (yes, in seconds too)");

        clickGenerate.setText("Create New Executable");
        clickGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickGenerateActionPerformed(evt);
            }
        });

        disableBIOSPass.setText("Disable BIOS Password resetting");
        disableBIOSPass.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        disableBIOSPass.setMargin(new java.awt.Insets(0, 0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clickGenerate)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(outputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(origR23Location, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputFileChooser)
                            .addComponent(origR23LocationFileChooser)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useDongleTrue)
                        .addGap(70, 70, 70)
                        .addComponent(useDongleFalse))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(enforcedSongLength)
                            .addComponent(giveUpTime, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)))
                    .addComponent(removeSongSizeCheck)
                    .addComponent(removeSongLengthCheck)
                    .addComponent(disableBIOSPass))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(origR23Location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(origR23LocationFileChooser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFileChooser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useDongleTrue)
                    .addComponent(useDongleFalse))
                .addGap(19, 19, 19)
                .addComponent(removeSongLengthCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeSongSizeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(disableBIOSPass)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(enforcedSongLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(giveUpTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(clickGenerate)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outputChooseFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputChooseFile
        outputFile.setText(chooseFile( outputFile.getText(), false ));
    }//GEN-LAST:event_outputChooseFile

    private String chooseFile(String before, boolean forR23Orig) {
        FileChooserDialog fcd = new FileChooserDialog(this, true, forR23Orig);
        fcd.setVisible(true);
        fcd.dispose();
        return fcd.sFile.isEmpty() ? before : fcd.sFile;
    }
    
    private void origR23ChooseFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_origR23ChooseFile
        origR23Location.setText( chooseFile( origR23Location.getText(), true ) );
    }//GEN-LAST:event_origR23ChooseFile

    private void showDialogMessage(String msg, boolean error) {
        JOptionPane.showMessageDialog(this, msg, "R23 Editor",
                error ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void clickGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickGenerateActionPerformed
        FileOutputStream fos;
        RandomAccessFile ras;
        DataOutputStream dos; //lol
        FileInputStream fis;
        ArrayList<ModLocation> points = new ArrayList<ModLocation>();
        
        if ( origR23Location.getText().isEmpty() ) {
            showDialogMessage("Please locate the original r23 executable first...", false);
            return;
        }
        
        if ( outputFile.getText().isEmpty() ) {
            showDialogMessage("Please specify the output file", false);
            return;
        }
        
        String origR23 = origR23Location.getText();
        String outFile = outputFile.getText();
        
        try {
            byte[] buf = new byte[4080];
            int ret;
            if ( !ITGR23MMain.getMD5FileHash(origR23).equals("bf4226aae272d364ff22f6d40a9c2ae8") ) {
                showDialogMessage(origR23 + " is not original r23 executable", true);
                return;
             }
            fis = new FileInputStream(origR23);
            fos = new FileOutputStream(outFile);
            do {
                ret = fis.read(buf, 0, 4080);
                fos.write(buf, 0, ret);
            } while (fis.available() > 0);
            fis.close();
            fos.close();

            float enforcedSongLengthTime = Float.valueOf(enforcedSongLength.getText()).floatValue();
            float giveUpTimeLength = Float.valueOf(giveUpTime.getText()).floatValue();
            
            if (enforcedSongLengthTime < 60)
                throw new RetardedInputException("Enforced Song Length: invalid value (must be >= 60 seconds)");
            
            if (giveUpTimeLength <= 0)
                throw new RetardedInputException("Give Up Time: seriously, something greater than 0 please");
            
            ras = new RandomAccessFile(outFile, "rws");
            if (useDongleFalse.isSelected()) {
                points.add(new ModLocation(0x4e10a7, new byte[] {'d', 'i', 'r'}, 3));
            }
            if (removeSongSizeCheck.isSelected()) {
                points.add(new ModLocation(0xfd24b, new byte[] {(byte)0xeb}, 1));
            }
            if (removeSongLengthCheck.isSelected()) {
                points.add(new ModLocation(0xfd31b, new byte[] {(byte)0xeb}, 1));
            }
            if (disableBIOSPass.isSelected()) {
                points.add(new ModLocation(0x215ba3, new byte[] {(byte)0xeb, (byte)0x14}, 2));
            }
            if (enforcedSongLengthTime != 135) {
                points.add(new ModLocation(0x48fc28, enforcedSongLengthTime));
            }
            
            // there's something else that uses the float data at that point
            // so we make a new point from empty .rodata space and use that
            // instead
            if (giveUpTimeLength != 2.5) {
                points.add(new ModLocation(0x48fc99, giveUpTimeLength));
                points.add(new ModLocation(0x79904, new byte[] {(byte)0x99}, 1));
            }
            
            //////////////////////////////////////////////////////////
            addChanges(points, ras);
            ras.close();
            showDialogMessage(
                "Successfully created new executable\n\nreplace /stats/patch/itg with new file",
                false
            );
        } catch (IOException e) {
            showDialogMessage("IO Exception: " + e.getMessage(), true);
        } catch (NoSuchAlgorithmException e) {
            showDialogMessage("MD5 Algorithm not installed...wtf?", true);
        } catch (RetardedInputException e) {
            showDialogMessage("Sanity check failed: " + e.getMessage(), true);
        }
    }//GEN-LAST:event_clickGenerateActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ITGR23Modifier().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clickGenerate;
    private javax.swing.JCheckBox disableBIOSPass;
    private javax.swing.JTextField enforcedSongLength;
    private javax.swing.JTextField giveUpTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField origR23Location;
    private javax.swing.JButton origR23LocationFileChooser;
    private javax.swing.JTextField outputFile;
    private javax.swing.JButton outputFileChooser;
    private javax.swing.JCheckBox removeSongLengthCheck;
    private javax.swing.JCheckBox removeSongSizeCheck;
    private javax.swing.JRadioButton useDongleFalse;
    private javax.swing.JRadioButton useDongleTrue;
    // End of variables declaration//GEN-END:variables
    
}
